{"ast":null,"code":"import * as _ from \"lodash\";\n\nclass Board {\n  constructor(rows, columns) {\n    this.rows = rows;\n    this.columns = columns;\n    this.onScoreChange = void 0;\n    this.timerToken = void 0;\n    this.onFlash = void 0;\n    this.history = void 0;\n    this.score = void 0;\n    this.history = [];\n    this.score = 0;\n  }\n\n  start(onFlash) {\n    this.onFlash = onFlash; // window.setTimeout(() => {\n    //     onFlash(this.next());\n    // }, 10000);\n\n    this.timerToken = window.setInterval(() => onFlash(this.next()), 2500);\n  }\n\n  stop() {\n    clearInterval(this.timerToken);\n    delete this.onFlash;\n    delete this.timerToken;\n  }\n\n  samePosition() {\n    if (this.history.length > 1 && _.isEqual(this.history[this.history.length - 1].position, this.history[this.history.length - 2].position)) {\n      this.updateScore(100);\n    } else {\n      this.updateScore(-50);\n    }\n  }\n\n  sameSound() {\n    if (this.history.length > 1 && _.isEqual(this.history[this.history.length - 1].sound, this.history[this.history.length - 2].sound)) {\n      this.updateScore(100);\n    } else {\n      this.updateScore(-50);\n    }\n  }\n\n  next() {\n    const p = 15;\n    const nextFlash = {};\n\n    if (this.history.length > 0 && this.randomInRange(1, 100) <= p) {\n      nextFlash.position = this.history[this.history.length - 1].position;\n    } else {\n      const randomRow = this.randomInRange(0, this.rows - 1);\n      const randomColumn = this.randomInRange(0, this.columns - 1);\n      nextFlash.position = [randomRow, randomColumn];\n    }\n\n    if (this.history.length > 0 && this.randomInRange(1, 100) <= p) {\n      nextFlash.sound = this.history[this.history.length - 1].sound;\n    } else {\n      const randomSound = this.randomInRange(1, 9);\n      nextFlash.sound = randomSound;\n    }\n\n    this.history.push(nextFlash);\n    return nextFlash;\n  }\n\n  updateScore(delta) {\n    const newScore = this.score + delta;\n\n    if (this.onScoreChange) {\n      this.onScoreChange(this.score, newScore);\n    }\n\n    this.score = newScore;\n  }\n\n  randomInRange(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["D:/Git/Macradon/ITTWEB1_24/pro-gamer-moves/src/Board.tsx"],"names":["_","Board","constructor","rows","columns","onScoreChange","timerToken","onFlash","history","score","start","window","setInterval","next","stop","clearInterval","samePosition","length","isEqual","position","updateScore","sameSound","sound","p","nextFlash","randomInRange","randomRow","randomColumn","randomSound","push","delta","newScore","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import * as _ from \"lodash\";\r\nimport Flash from \"./Flash\";\r\n\r\nclass Board {\r\n\r\n    public onScoreChange?: (prevScore: number, nextScore: number) => void;\r\n\r\n    private timerToken?: number;\r\n    private onFlash?: (flash: Flash) => void;\r\n    private readonly history: Flash[];\r\n    private score: number;\r\n\r\n    constructor(\r\n        public readonly rows: number,\r\n        public readonly columns: number\r\n    ) {\r\n        this.history = [];\r\n        this.score = 0;\r\n    }\r\n\r\n    public start(onFlash: (flash: Flash) => void) {\r\n        this.onFlash = onFlash;\r\n\r\n        // window.setTimeout(() => {\r\n        //     onFlash(this.next());\r\n        // }, 10000);\r\n        this.timerToken = window.setInterval(() => onFlash(this.next()), 2500);\r\n    }\r\n\r\n    public stop() {\r\n        clearInterval(this.timerToken);\r\n        delete this.onFlash;\r\n        delete this.timerToken;\r\n    }\r\n\r\n    public samePosition() {\r\n        if (this.history.length > 1 && _.isEqual(this.history[this.history.length - 1].position, this.history[this.history.length - 2].position)) {\r\n            this.updateScore(100);\r\n        } else {\r\n            this.updateScore(-50);\r\n        }\r\n    }\r\n\r\n    public sameSound() {\r\n        if (this.history.length > 1 && _.isEqual(this.history[this.history.length - 1].sound, this.history[this.history.length - 2].sound)) {\r\n            this.updateScore(100);\r\n        } else {\r\n            this.updateScore(-50);\r\n        }\r\n    }\r\n\r\n    private next() {\r\n        const p: number = 15;\r\n        const nextFlash: any = {};\r\n\r\n        if (this.history.length > 0 && this.randomInRange(1, 100) <= p) {\r\n            nextFlash.position = this.history[this.history.length - 1].position;\r\n        } else {\r\n            const randomRow = this.randomInRange(0, this.rows - 1);\r\n            const randomColumn = this.randomInRange(0, this.columns - 1);\r\n            nextFlash.position = [randomRow, randomColumn];\r\n        }\r\n\r\n        if (this.history.length > 0 && this.randomInRange(1, 100) <= p) {\r\n            nextFlash.sound = this.history[this.history.length - 1].sound;\r\n        } else {\r\n            const randomSound = this.randomInRange(1, 9);\r\n            nextFlash.sound = randomSound;\r\n        }\r\n\r\n        this.history.push(nextFlash);\r\n        return nextFlash;\r\n    }\r\n\r\n    private updateScore(delta: number) {\r\n        const newScore: number = this.score + delta;\r\n        if (this.onScoreChange) {\r\n            this.onScoreChange(this.score, newScore);\r\n        }\r\n        this.score = newScore;\r\n    }\r\n\r\n    private randomInRange(min: number, max: number) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}